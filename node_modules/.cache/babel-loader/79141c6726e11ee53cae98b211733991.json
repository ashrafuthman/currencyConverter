{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/Currency.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport Summary from './Summary';\n\nconst Currency = props => {\n  _s();\n\n  const dates = ['1999-02-03', '1999-02-04'];\n  const result = [];\n\n  const _ref = props.chosenSide === 'realtime' ? useCurrencyLayer({\n    chosenSide: props.chosenSide,\n    currencies: [props.selectedCurrency]\n  }, [props.selectedCurrency]) : dates.map(date => {\n    useCurrencyLayer({\n      selectedCurrency: props.selectedCurrency,\n      chosenSide: 'weekly',\n      currencies: ['EUR', 'CHF'],\n      date: date\n    }, []);\n    return result.push(fetchedData);\n  }),\n        _ref2 = _slicedToArray(_ref, 2),\n        isLoading = _ref2[0],\n        fetchedData = _ref2[1];\n\n  let loadedCurrency = null;\n\n  if (fetchedData) {\n    loadedCurrency = {\n      id: props.selectedCurrency,\n      currencyValue: fetchedData\n    };\n  } // useEffect(() => {\n  //   return () => {\n  //     console.log('component did unmount');\n  //   };\n  // }, []);\n\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading Currency...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 17\n  }, this);\n\n  if (!isLoading && loadedCurrency) {\n    content = /*#__PURE__*/_jsxDEV(Summary, {\n      name: loadedCurrency.id,\n      chosenSide: props.chosenSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  } else if (!isLoading && !loadedCurrency) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Failed to fetch Currency.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }, this);\n  }\n\n  return content;\n};\n\n_s(Currency, \"4pph6aFqneQ+755cvaMj+y7hVj4=\", false, function () {\n  return [useCurrencyLayer];\n});\n\n_c = Currency;\nexport default _c2 = /*#__PURE__*/React.memo(Currency);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Currency\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/Currency.js"],"names":["React","useEffect","useCurrencyLayer","Summary","Currency","props","dates","result","chosenSide","currencies","selectedCurrency","map","date","push","fetchedData","isLoading","loadedCurrency","id","currencyValue","content","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAAA;;AACtB,QAAMC,KAAK,GAAG,CAAC,YAAD,EAAe,YAAf,CAAd;AACA,QAAMC,MAAM,GAAG,EAAf;;AAFsB,eAGYF,KAAK,CAACG,UAAN,KAAqB,UAAtB,GAAoCN,gBAAgB,CACnF;AAACM,IAAAA,UAAU,EAAEH,KAAK,CAACG,UAAnB;AAAgCC,IAAAA,UAAU,EAAE,CAACJ,KAAK,CAACK,gBAAP;AAA5C,GADmF,EAEnF,CAACL,KAAK,CAACK,gBAAP,CAFmF,CAApD,GAG7BJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAS;AACnBV,IAAAA,gBAAgB,CAChB;AAAEQ,MAAAA,gBAAgB,EAAEL,KAAK,CAACK,gBAA1B;AACEF,MAAAA,UAAU,EAAE,QADd;AAEEC,MAAAA,UAAU,EAAE,CAAC,KAAD,EAAO,KAAP,CAFd;AAE6BG,MAAAA,IAAI,EAAEA;AAFnC,KADgB,EAG2B,EAH3B,CAAhB;AAIC,WAAOL,MAAM,CAACM,IAAP,CAAYC,WAAZ,CAAP;AACJ,GANG,CANkB;AAAA;AAAA,QAGfC,SAHe;AAAA,QAGJD,WAHI;;AAcxB,MAAIE,cAAc,GAAG,IAArB;;AAEA,MAAIF,WAAJ,EAAiB;AACfE,IAAAA,cAAc,GAAG;AACfC,MAAAA,EAAE,EAAEZ,KAAK,CAACK,gBADK;AAEfQ,MAAAA,aAAa,EAAEJ;AAFA,KAAjB;AAID,GArBuB,CAuBxB;AACA;AACA;AACA;AACA;;;AAEA,MAAIK,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAI,CAACJ,SAAD,IAAcC,cAAlB,EAAkC;AAChCG,IAAAA,OAAO,gBACL,QAAC,OAAD;AACE,MAAA,IAAI,EAAEH,cAAc,CAACC,EADvB;AAEE,MAAA,UAAU,EAAEZ,KAAK,CAACG;AAFpB;AAAA;AAAA;AAAA;AAAA,YADF;AAMD,GAPD,MAOO,IAAI,CAACO,SAAD,IAAc,CAACC,cAAnB,EAAmC;AACxCG,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AACD,SAAOA,OAAP;AACD,CA1CD;;GAAMf,Q;UAGmEF,gB;;;KAHnEE,Q;AA4CN,kCAAeJ,KAAK,CAACoB,IAAN,CAAWhB,QAAX,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport Summary from './Summary';\n\nconst Currency = props => {\n    const dates = ['1999-02-03', '1999-02-04'];\n    const result = [];\n    const [isLoading, fetchedData] = (props.chosenSide === 'realtime') ? useCurrencyLayer(\n      {chosenSide: props.chosenSide , currencies: [props.selectedCurrency]},\n      [props.selectedCurrency]\n    ) : dates.map((date)=> {\n        useCurrencyLayer(\n        { selectedCurrency: props.selectedCurrency,\n          chosenSide: 'weekly',\n          currencies: ['EUR','CHF'], date: date }, []);\n         return result.push(fetchedData)\n    });\n\n  let loadedCurrency = null;\n\n  if (fetchedData) {\n    loadedCurrency = {\n      id: props.selectedCurrency,\n      currencyValue: fetchedData,\n    };\n  }\n\n  // useEffect(() => {\n  //   return () => {\n  //     console.log('component did unmount');\n  //   };\n  // }, []);\n\n  let content = <p>Loading Currency...</p>;\n\n  if (!isLoading && loadedCurrency) {\n    content = (\n      <Summary\n        name={loadedCurrency.id}\n        chosenSide={props.chosenSide}\n      />\n    );\n  } else if (!isLoading && !loadedCurrency) {\n    content = <p>Failed to fetch Currency.</p>;\n  }\n  return content;\n};\n\nexport default React.memo(Currency);\n"]},"metadata":{},"sourceType":"module"}