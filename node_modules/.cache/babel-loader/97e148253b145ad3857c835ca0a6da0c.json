{"ast":null,"code":"import _regeneratorRuntime from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CurrencyLayerClient from 'currencylayer-client';\nexport const useCurrencyLayer = (params, dependencies) => {\n  _s();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fetchedData = _useState4[0],\n        setFetchedData = _useState4[1];\n\n  useEffect(() => {\n    setIsLoading(true);\n    const client = new CurrencyLayerClient({\n      apiKey: '531d6475cefb59a4563e9acbef4b0559'\n    });\n\n    const fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return params.choseSide;\n\n            case 2:\n              _context.t0 = _context.sent;\n\n              if (!(_context.t0 === 'realtime')) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.t1 = client.live({\n                source: 'USD',\n                currencies: ['EUR', 'CHF']\n              });\n              _context.next = 8;\n              break;\n\n            case 7:\n              _context.t1 = client.historical({\n                date: '2000-01-01',\n                currencies: ['EUR', 'CHF']\n              });\n\n            case 8:\n              return _context.abrupt(\"return\", _context.t1);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData().then(response => {\n      if (!response.success) {\n        throw new Error('Failed to fetch.');\n      }\n\n      debugger;\n      setIsLoading(false);\n      setFetchedData(response.quotes);\n    }).catch(err => {\n      console.log(err);\n      setIsLoading(false);\n    });\n  }, dependencies);\n  return [isLoading, fetchedData];\n};\n\n_s(useCurrencyLayer, \"CWMStT5ESAlGFFTH86l3rPuNF+E=\");","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/hooks/currencyLayer.js"],"names":["useState","useEffect","CurrencyLayerClient","useCurrencyLayer","params","dependencies","isLoading","setIsLoading","fetchedData","setFetchedData","client","apiKey","fetchData","choseSide","live","source","currencies","historical","date","then","response","success","Error","quotes","catch","err","console","log"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,mBAAP,MAAgC,sBAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,YAAT,KAA0B;AAAA;;AAAA,oBACtBL,QAAQ,CAAC,KAAD,CADc;AAAA;AAAA,QACjDM,SADiD;AAAA,QACtCC,YADsC;;AAAA,qBAElBP,QAAQ,CAAC,IAAD,CAFU;AAAA;AAAA,QAEjDQ,WAFiD;AAAA,QAEpCC,cAFoC;;AAIxDR,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMG,MAAM,GAAG,IAAIR,mBAAJ,CAAwB;AAACS,MAAAA,MAAM,EAAE;AAAT,KAAxB,CAAf;;AACE,UAAMC,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAkBR,MAAM,CAACS,SAAzB;;AAAA;AAAA;;AAAA,oCAAuC,UAAvC;AAAA;AAAA;AAAA;;AAAA,4BAChBH,MAAM,CAACI,IAAP,CAAY;AAACC,gBAAAA,MAAM,EAAE,KAAT;AAAgBC,gBAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR;AAA5B,eAAZ,CADgB;AAAA;AAAA;;AAAA;AAAA,4BAGZN,MAAM,CAACO,UAAP,CACE;AACEC,gBAAAA,IAAI,EAAE,YADR;AAEEF,gBAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR;AAFd,eADF,CAHY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATJ,SAAS;AAAA;AAAA;AAAA,OAAf;;AASFA,IAAAA,SAAS,GAAGO,IAAZ,CAAiBC,QAAQ,IAAI;AACzB,UAAI,CAACA,QAAQ,CAACC,OAAd,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD;AACAf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,cAAc,CAACW,QAAQ,CAACG,MAAV,CAAd;AACD,KAPH,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAlB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAXH;AAYD,GAxBQ,EAwBNF,YAxBM,CAAT;AA0BA,SAAO,CAACC,SAAD,EAAYE,WAAZ,CAAP;AACD,CA/BM;;GAAML,gB","sourcesContent":["import { useState, useEffect } from 'react';\nimport CurrencyLayerClient from 'currencylayer-client';\n\nexport const useCurrencyLayer = (params, dependencies) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedData, setFetchedData] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const client = new CurrencyLayerClient({apiKey: '531d6475cefb59a4563e9acbef4b0559'});\n      const fetchData = async () => await params.choseSide === 'realtime' ?\n        client.live({source: 'USD', currencies: ['EUR', 'CHF']})\n          :\n            client.historical(\n              { \n                date: '2000-01-01',\n                currencies: ['EUR', 'CHF'],\n              })\n\n    fetchData().then(response => {\n        if (!response.success) {\n          throw new Error('Failed to fetch.');\n        }\n        debugger;\n        setIsLoading(false);\n        setFetchedData(response.quotes);\n      })\n      .catch(err => {\n        console.log(err);\n        setIsLoading(false);\n      });\n  }, dependencies);\n\n  return [isLoading, fetchedData];\n};\n"]},"metadata":{},"sourceType":"module"}