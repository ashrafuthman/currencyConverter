{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/Currency.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport Summary from './Summary';\n\nconst Currency = props => {\n  _s();\n\n  const _useCurrencyLayer = useCurrencyLayer({\n    selectedCurrency: props.selectedCurrency,\n    chosenSide: props.chosenSide\n  }, [props.selectedCurrency]),\n        _useCurrencyLayer2 = _slicedToArray(_useCurrencyLayer, 2),\n        isLoading = _useCurrencyLayer2[0],\n        fetchedData = _useCurrencyLayer2[1];\n\n  let loadedCurrency = null;\n\n  if (fetchedData) {\n    loadedCurrency = {\n      id: props.selectedCurrency,\n      currencyValue: props.selectedCurrency\n    };\n  } // useEffect(() => {\n  //   return () => {\n  //     console.log('component did unmount');\n  //   };\n  // }, []);\n\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading Currency...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 17\n  }, this);\n\n  if (!isLoading && loadedCurrency) {\n    content = /*#__PURE__*/_jsxDEV(Summary, {\n      name: loadedCurrency.currencyValue,\n      currencyValue: loadedCurrency.currencyValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  } else if (!isLoading && !loadedCurrency) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Failed to fetch Currency.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }, this);\n  }\n\n  return content;\n};\n\n_s(Currency, \"n14PydaXUL0pOdKmSMjxG6uL2Yw=\", false, function () {\n  return [useCurrencyLayer];\n});\n\n_c = Currency;\nexport default _c2 = /*#__PURE__*/React.memo(Currency);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Currency\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/Currency.js"],"names":["React","useEffect","useCurrencyLayer","Summary","Currency","props","selectedCurrency","chosenSide","isLoading","fetchedData","loadedCurrency","id","currencyValue","content","memo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAAA;;AAAA,4BAESH,gBAAgB,CAC/C;AAACI,IAAAA,gBAAgB,EAAED,KAAK,CAACC,gBAAzB;AAA2CC,IAAAA,UAAU,EAAEF,KAAK,CAACE;AAA7D,GAD+C,EAE/C,CAACF,KAAK,CAACC,gBAAP,CAF+C,CAFzB;AAAA;AAAA,QAEjBE,SAFiB;AAAA,QAENC,WAFM;;AAOxB,MAAIC,cAAc,GAAG,IAArB;;AAEA,MAAID,WAAJ,EAAiB;AACfC,IAAAA,cAAc,GAAG;AACfC,MAAAA,EAAE,EAAEN,KAAK,CAACC,gBADK;AAEfM,MAAAA,aAAa,EAAEP,KAAK,CAACC;AAFN,KAAjB;AAID,GAduB,CAgBxB;AACA;AACA;AACA;AACA;;;AAEA,MAAIO,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAI,CAACL,SAAD,IAAcE,cAAlB,EAAkC;AAChCG,IAAAA,OAAO,gBACL,QAAC,OAAD;AACE,MAAA,IAAI,EAAEH,cAAc,CAACE,aADvB;AAEE,MAAA,aAAa,EAAEF,cAAc,CAACE;AAFhC;AAAA;AAAA;AAAA;AAAA,YADF;AAMD,GAPD,MAOO,IAAI,CAACJ,SAAD,IAAc,CAACE,cAAnB,EAAmC;AACxCG,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AACD,SAAOA,OAAP;AACD,CAnCD;;GAAMT,Q;UAE6BF,gB;;;KAF7BE,Q;AAqCN,kCAAeJ,KAAK,CAACc,IAAN,CAAWV,QAAX,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport Summary from './Summary';\n\nconst Currency = props => {\n\n  const [isLoading, fetchedData] = useCurrencyLayer(\n    {selectedCurrency: props.selectedCurrency, chosenSide: props.chosenSide},\n    [props.selectedCurrency]\n  );\n\n  let loadedCurrency = null;\n\n  if (fetchedData) {\n    loadedCurrency = {\n      id: props.selectedCurrency,\n      currencyValue: props.selectedCurrency,\n    };\n  }\n\n  // useEffect(() => {\n  //   return () => {\n  //     console.log('component did unmount');\n  //   };\n  // }, []);\n\n  let content = <p>Loading Currency...</p>;\n\n  if (!isLoading && loadedCurrency) {\n    content = (\n      <Summary\n        name={loadedCurrency.currencyValue}\n        currencyValue={loadedCurrency.currencyValue}\n      />\n    );\n  } else if (!isLoading && !loadedCurrency) {\n    content = <p>Failed to fetch Currency.</p>;\n  }\n  return content;\n};\n\nexport default React.memo(Currency);\n"]},"metadata":{},"sourceType":"module"}