{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst request = require('request-promise');\n\nconst moment = require('moment');\n\nconst handleErrors = require('./error').handleErrors;\n\nconst BASE_URL_HTTP = 'http://apilayer.net/api';\nconst BASE_URL_HTTPS = 'https://apilayer.net/api';\n\nclass CurrencyLayerClient {\n  constructor({\n    apiKey = '',\n    free = true\n  } = {}) {\n    if (_.isEmpty(apiKey)) {\n      throw new Error('apiKey must be provided');\n    }\n\n    this.free = free;\n    this.baseUrl = this.free ? BASE_URL_HTTP : BASE_URL_HTTPS;\n    this.client = request.defaults({\n      baseUrl: this.baseUrl,\n      qs: {\n        access_key: apiKey\n      },\n      json: true\n    });\n  }\n\n  live({\n    currencies,\n    source\n  } = {}) {\n    if (_.isArray(currencies)) {\n      currencies = _.join(currencies, ',');\n    }\n\n    return this.client.get({\n      uri: '/live',\n      qs: {\n        currencies,\n        source\n      }\n    }).then(handleErrors);\n  }\n\n  historical({\n    date,\n    currencies,\n    source\n  } = {}) {\n    if (_.isArray(currencies)) {\n      currencies = _.join(currencies, ',');\n    }\n\n    if (!_.isString(date)) {\n      date = moment(date).format('YYYY-MM-DD');\n    }\n\n    return this.client.get({\n      uri: '/historical',\n      qs: {\n        date,\n        currencies,\n        source\n      }\n    }).then(handleErrors);\n  }\n\n  convert({\n    from,\n    to,\n    amount,\n    date\n  } = {}) {\n    if (date && !_.isString(date)) {\n      date = moment(date).format('YYYY-MM-DD');\n    }\n\n    return this.client.get({\n      uri: '/convert',\n      qs: {\n        from,\n        to,\n        amount,\n        date\n      }\n    }).then(handleErrors);\n  }\n\n}\n\nmodule.exports = CurrencyLayerClient;","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/currencylayer-client/lib/client.js"],"names":["_","require","request","moment","handleErrors","BASE_URL_HTTP","BASE_URL_HTTPS","CurrencyLayerClient","constructor","apiKey","free","isEmpty","Error","baseUrl","client","defaults","qs","access_key","json","live","currencies","source","isArray","join","get","uri","then","historical","date","isString","format","convert","from","to","amount","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst _             = require('lodash')\nconst request       = require('request-promise')\nconst moment        = require('moment')\nconst handleErrors  = require('./error').handleErrors\n\nconst BASE_URL_HTTP   = 'http://apilayer.net/api'\nconst BASE_URL_HTTPS  = 'https://apilayer.net/api'\n\nclass CurrencyLayerClient {\n  constructor({apiKey='', free=true} = {}) {\n    if (_.isEmpty(apiKey)) {\n      throw new Error('apiKey must be provided')\n    }\n\n    this.free     = free\n    this.baseUrl  = this.free ? BASE_URL_HTTP : BASE_URL_HTTPS\n\n    this.client = request.defaults({\n      baseUrl: this.baseUrl,\n      qs: {\n        access_key: apiKey,\n      },\n      json: true,\n    })\n  }\n\n  live({currencies, source} = {}) {\n    if (_.isArray(currencies)) {\n      currencies = _.join(currencies, ',')\n    }\n\n    return this.client.get({\n      uri: '/live',\n      qs: {currencies, source},\n    })\n    .then(handleErrors)\n  }\n\n  historical({date, currencies, source} = {}) {\n    if (_.isArray(currencies)) {\n      currencies = _.join(currencies, ',')\n    }\n\n    if (!_.isString(date)) {\n      date = moment(date).format('YYYY-MM-DD')\n    }\n\n    return this.client.get({\n      uri: '/historical',\n      qs: {date, currencies, source},\n    })\n    .then(handleErrors)\n  }\n\n  convert({from, to, amount, date} = {}) {\n    if (date && !_.isString(date)) {\n      date = moment(date).format('YYYY-MM-DD')\n    }\n\n    return this.client.get({\n      uri: '/convert',\n      qs: {from, to, amount, date},\n    })\n    .then(handleErrors)\n  }\n}\n\nmodule.exports = CurrencyLayerClient\n"]},"metadata":{},"sourceType":"script"}