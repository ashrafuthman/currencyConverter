{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/CurrencyPicker.js\",\n    _s = $RefreshSig$();\n\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport './CurrencyPicker.css';\nimport Summary from './Summary';\nimport React, { useState } from 'react';\n\nconst CurrencyPicker = props => {\n  _s();\n\n  const _useState = useState('USDEUR'),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedCurrency = _useState2[0],\n        setSelectedCurrency = _useState2[1];\n\n  const _useCurrencyLayer = useCurrencyLayer({\n    selectedCurrency,\n    currencies: ['EUR', 'CHF'],\n    date: props.dates\n  }, props.dates),\n        _useCurrencyLayer2 = _slicedToArray(_useCurrencyLayer, 2),\n        isLoading = _useCurrencyLayer2[0],\n        fetchedData = _useCurrencyLayer2[1];\n\n  let latestCurrencies;\n  const currencyValues = [];\n  const currencyDate = [];\n\n  const currencySelectHandler = event => {\n    const currency = event.target.value;\n    setSelectedCurrency(currency);\n  };\n\n  const currencyName = name => {\n    let unwantedString = name.includes('EUR') ? 'EUR' : 'USD';\n    return name.replace(unwantedString, '');\n  };\n\n  if (fetchedData) {\n    fetchedData.forEach((data, index) => {\n      if (index === 6) {\n        latestCurrencies = Object.keys(data.currencyValues).map((currency, index) => ({\n          id: index + 1,\n          name: currency\n        }));\n      }\n\n      if (currencyName(selectedCurrency) === 'CHF') {\n        let eurToChf = parseFloat(data.currencyValues[selectedCurrency] / data.currencyValues['USDEUR']);\n        currencyValues.push(eurToChf.toFixed(3));\n      } else {\n        let eurToUsd = 1 - data.currencyValues[selectedCurrency];\n        eurToUsd = eurToUsd / data.currencyValues[selectedCurrency];\n        eurToUsd = eurToUsd * 1;\n        currencyValues.push((eurToUsd + 1).toFixed(3));\n      }\n\n      let dateArr = data.date.split('-');\n      let monthDayFormat = [dateArr[1], dateArr[2]].join('-');\n      currencyDate.push(monthDayFormat);\n    });\n  }\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading Currencys...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 17\n  }, this);\n\n  if (!isLoading && latestCurrencies && latestCurrencies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: currencySelectHandler,\n        value: selectedCurrency,\n        children: latestCurrencies.map(currency => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: currency.name,\n          children: currencyName(currency.name)\n        }, currency.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Summary, {\n        selectedCurrency: currencyName(selectedCurrency),\n        currencyValues: currencyValues,\n        dates: currencyDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else if (!isLoading && (!latestCurrencies || latestCurrencies.length === 0)) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Could not fetch any data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }, this);\n  }\n\n  return content;\n};\n\n_s(CurrencyPicker, \"8+nfksKGzDO65BeYRZT0hAK1GVU=\", false, function () {\n  return [useCurrencyLayer];\n});\n\n_c = CurrencyPicker;\nexport default CurrencyPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyPicker\");","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/CurrencyPicker.js"],"names":["useCurrencyLayer","Summary","React","useState","CurrencyPicker","props","selectedCurrency","setSelectedCurrency","currencies","date","dates","isLoading","fetchedData","latestCurrencies","currencyValues","currencyDate","currencySelectHandler","event","currency","target","value","currencyName","name","unwantedString","includes","replace","forEach","data","index","Object","keys","map","id","eurToChf","parseFloat","push","toFixed","eurToUsd","dateArr","split","monthDayFormat","join","content","length"],"mappings":"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","sourcesContent":["import { useCurrencyLayer } from '../hooks/currencyLayer';\nimport './CurrencyPicker.css';\nimport Summary from './Summary';\nimport React, { useState } from 'react';\n\nconst CurrencyPicker = props => {\n  const [selectedCurrency, setSelectedCurrency] = useState('USDEUR');\n  const [isLoading, fetchedData] = useCurrencyLayer(\n    { selectedCurrency, currencies: ['EUR','CHF'], date: props.dates }, props.dates);\n  let latestCurrencies;\n  const currencyValues = [];\n  const currencyDate = [];\n\n  const currencySelectHandler = event => {\n      const currency = event.target.value;\n      setSelectedCurrency(currency);\n  };\n\n  const currencyName = name => {\n    let unwantedString = name.includes('EUR') ? 'EUR' : 'USD';\n    return name.replace(unwantedString, '')\n  };\n\n  if (fetchedData) {\n    fetchedData.forEach((data, index) => {\n      if (index === 6) {\n        latestCurrencies = Object.keys(data.currencyValues).map((currency, index) => ({\n          id: index + 1,\n          name: currency,\n        }));\n      }\n      if (currencyName(selectedCurrency) === 'CHF') {\n        let eurToChf =  parseFloat(data.currencyValues[selectedCurrency] / data.currencyValues['USDEUR']);\n        currencyValues.push(eurToChf.toFixed(3))\n      } else {\n        let eurToUsd = 1 - data.currencyValues[selectedCurrency];\n        eurToUsd = eurToUsd / data.currencyValues[selectedCurrency];\n        eurToUsd = eurToUsd * 1;\n        currencyValues.push((eurToUsd + 1).toFixed(3))\n      }\n      let dateArr = data.date.split('-');\n      let monthDayFormat =[dateArr[1], dateArr[2]].join('-');\n      currencyDate.push(monthDayFormat);\n    })\n  }\n  \n  let content = <p>Loading Currencys...</p>;\n\n  if (!isLoading && latestCurrencies && latestCurrencies.length > 0) {\n    content = (\n      <>\n        <select\n          onChange={currencySelectHandler}\n          value={selectedCurrency}\n        >\n          {latestCurrencies.map(currency => (\n            <option key={currency.id} value={currency.name}>\n              {currencyName(currency.name)}\n            </option>\n          ))}\n        </select>\n        <br/>\n        <Summary\n          selectedCurrency={currencyName(selectedCurrency)}\n          currencyValues={currencyValues}\n          dates={currencyDate}\n        />\n      </>\n    );\n  } else if (\n    !isLoading &&\n    (!latestCurrencies || latestCurrencies.length === 0)\n  ) {\n    content = <p>Could not fetch any data.</p>;\n  }\n  return content;\n};\n\nexport default CurrencyPicker;\n"]},"metadata":{},"sourceType":"module"}