{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/CurrencyPicker.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport './CurrencyPicker.css';\n\nconst CurrencyPicker = props => {\n  _s();\n\n  const _useState = useState('USDEUR'),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedCurrency = _useState2[0],\n        setSelectedCurrency = _useState2[1];\n\n  const _useCurrencyLayer = useCurrencyLayer({\n    selectedCurrency: props.selectedCurrency,\n    currencies: ['EUR', 'CHF'],\n    date: ['2020-01-01']\n  }, []),\n        _useCurrencyLayer2 = _slicedToArray(_useCurrencyLayer, 2),\n        isLoading = _useCurrencyLayer2[0],\n        fetchedData = _useCurrencyLayer2[1];\n\n  const currencySelectHandler = event => {\n    const currency = event.target.value;\n    setSelectedCurrency(currency);\n  };\n\n  let latestCurrencies;\n\n  if (fetchedData) {\n    const res = fetchedData.slice(-1)[0].currencyValues;\n    latestCurrencies = Object.keys(res).map((currency, index) => ({\n      id: index + 1,\n      name: currency,\n      value: res[currency]\n    }));\n  } else {\n    latestCurrencies = [];\n  }\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading Currencys...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 17\n  }, this);\n\n  if (!isLoading && latestCurrencies && latestCurrencies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: props.onCurrencySelect,\n        value: selectedCurrency,\n        children: latestCurrencies.map(currency => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: currency.name,\n          children: currency.name\n        }, currency.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Summary, {\n        selectedCurrency: loadedCurrency.id,\n        currencyValues: loadedCurrency.currencyValue,\n        dates: loadedCurrency.dates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else if (!isLoading && (!latestCurrencies || latestCurrencies.length === 0)) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Could not fetch any data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  }\n\n  return content;\n};\n\n_s(CurrencyPicker, \"8+nfksKGzDO65BeYRZT0hAK1GVU=\", false, function () {\n  return [useCurrencyLayer];\n});\n\n_c = CurrencyPicker;\nexport default CurrencyPicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyPicker\");","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/components/CurrencyPicker.js"],"names":["React","useCurrencyLayer","CurrencyPicker","props","useState","selectedCurrency","setSelectedCurrency","currencies","date","isLoading","fetchedData","currencySelectHandler","event","currency","target","value","latestCurrencies","res","slice","currencyValues","Object","keys","map","index","id","name","content","length","onCurrencySelect","loadedCurrency","currencyValue","dates"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAO,sBAAP;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAAA;;AAAA,oBACkBC,QAAQ,CAAC,QAAD,CAD1B;AAAA;AAAA,QACvBC,gBADuB;AAAA,QACLC,mBADK;;AAAA,4BAEGL,gBAAgB,CAC/C;AAAEI,IAAAA,gBAAgB,EAAEF,KAAK,CAACE,gBAA1B;AACAE,IAAAA,UAAU,EAAE,CAAC,KAAD,EAAO,KAAP,CADZ;AAC2BC,IAAAA,IAAI,EAAE,CAAC,YAAD;AADjC,GAD+C,EAEI,EAFJ,CAFnB;AAAA;AAAA,QAEvBC,SAFuB;AAAA,QAEZC,WAFY;;AAM9B,QAAMC,qBAAqB,GAAGC,KAAK,IAAI;AACnC,UAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACAT,IAAAA,mBAAmB,CAACO,QAAD,CAAnB;AACH,GAHD;;AAIA,MAAIG,gBAAJ;;AACA,MAAIN,WAAJ,EAAiB;AACf,UAAMO,GAAG,GAAGP,WAAW,CAACQ,KAAZ,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyBC,cAArC;AACAH,IAAAA,gBAAgB,GAAII,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,GAAjB,CAAqB,CAACT,QAAD,EAAWU,KAAX,MAAsB;AAC3DC,MAAAA,EAAE,EAAED,KAAK,GAAG,CAD+C;AAE3DE,MAAAA,IAAI,EAAEZ,QAFqD;AAG3DE,MAAAA,KAAK,EAAEE,GAAG,CAACJ,QAAD;AAHiD,KAAtB,CAArB,CAApB;AAKD,GAPD,MAOO;AACLG,IAAAA,gBAAgB,GAAG,EAAnB;AACD;;AAED,MAAIU,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,MAAI,CAACjB,SAAD,IAAcO,gBAAd,IAAkCA,gBAAgB,CAACW,MAAjB,GAA0B,CAAhE,EAAmE;AACjED,IAAAA,OAAO,gBACL;AAAA,8BACE;AACE,QAAA,QAAQ,EAAEvB,KAAK,CAACyB,gBADlB;AAEE,QAAA,KAAK,EAAEvB,gBAFT;AAAA,kBAIGW,gBAAgB,CAACM,GAAjB,CAAqBT,QAAQ,iBAC5B;AAA0B,UAAA,KAAK,EAAEA,QAAQ,CAACY,IAA1C;AAAA,oBACGZ,QAAQ,CAACY;AADZ,WAAaZ,QAAQ,CAACW,EAAtB;AAAA;AAAA;AAAA;AAAA,gBADD;AAJH;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE,QAAC,OAAD;AACE,QAAA,gBAAgB,EAAEK,cAAc,CAACL,EADnC;AAEE,QAAA,cAAc,EAAEK,cAAc,CAACC,aAFjC;AAGE,QAAA,KAAK,EAAED,cAAc,CAACE;AAHxB;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA,oBADF;AAoBD,GArBD,MAqBO,IACL,CAACtB,SAAD,KACC,CAACO,gBAAD,IAAqBA,gBAAgB,CAACW,MAAjB,KAA4B,CADlD,CADK,EAGL;AACAD,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AACD,SAAOA,OAAP;AACD,CApDD;;GAAMxB,c;UAE6BD,gB;;;KAF7BC,c;AAsDN,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport { useCurrencyLayer } from '../hooks/currencyLayer';\nimport './CurrencyPicker.css';\n\nconst CurrencyPicker = props => {\n  const [selectedCurrency, setSelectedCurrency] = useState('USDEUR');\n  const [isLoading, fetchedData] = useCurrencyLayer(\n    { selectedCurrency: props.selectedCurrency,\n    currencies: ['EUR','CHF'], date: ['2020-01-01'] }, []);\n\n  const currencySelectHandler = event => {\n      const currency = event.target.value;\n      setSelectedCurrency(currency);\n  };\n  let latestCurrencies;\n  if (fetchedData) {\n    const res = fetchedData.slice(-1)[0].currencyValues;\n    latestCurrencies =  Object.keys(res).map((currency, index) => ({\n        id: index + 1,\n        name: currency,\n        value: res[currency]\n      }));\n  } else {\n    latestCurrencies = []\n  }\n\n  let content = <p>Loading Currencys...</p>;\n\n  if (!isLoading && latestCurrencies && latestCurrencies.length > 0) {\n    content = (\n      <>\n        <select\n          onChange={props.onCurrencySelect}\n          value={selectedCurrency}\n        >\n          {latestCurrencies.map(currency => (\n            <option key={currency.id} value={currency.name}>\n              {currency.name}\n            </option>\n          ))}\n        </select>\n        <br/>\n        <Summary\n          selectedCurrency={loadedCurrency.id}\n          currencyValues={loadedCurrency.currencyValue}\n          dates={loadedCurrency.dates}\n        />\n      </>\n    );\n  } else if (\n    !isLoading &&\n    (!latestCurrencies || latestCurrencies.length === 0)\n  ) {\n    content = <p>Could not fetch any data.</p>;\n  }\n  return content;\n};\n\nexport default CurrencyPicker;\n"]},"metadata":{},"sourceType":"module"}