{"ast":null,"code":"import _slicedToArray from \"/home/ashraf/code/ashrafuthman/react-hooks-introduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CurrencyLayerClient from 'currencylayer-client';\nexport const useCurrencyLayer = (params, dependencies) => {\n  _s();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fetchedData = _useState4[0],\n        setFetchedData = _useState4[1];\n\n  useEffect(() => {\n    setIsLoading(true);\n    const client = new CurrencyLayerClient({\n      apiKey: '531d6475cefb59a4563e9acbef4b0559'\n    });\n\n    if (params && params.date) {\n      params.date.map(d => {\n        const requestedParams = {\n          currencies: params.currencies,\n          date: d\n        };\n        client.historical(requestedParams).then(response => {\n          if (!response.success) {\n            throw new Error('Failed to fetch.');\n          } else {\n            setIsLoading(false);\n            setFetchedData(response.quotes);\n          }\n        }).catch(err => {\n          console.log(err);\n          setIsLoading(false);\n        });\n      });\n    }\n  }, dependencies);\n  return [isLoading, fetchedData];\n};\n\n_s(useCurrencyLayer, \"CWMStT5ESAlGFFTH86l3rPuNF+E=\");","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/react-hooks-introduction/src/hooks/currencyLayer.js"],"names":["useState","useEffect","CurrencyLayerClient","useCurrencyLayer","params","dependencies","isLoading","setIsLoading","fetchedData","setFetchedData","client","apiKey","date","map","d","requestedParams","currencies","historical","then","response","success","Error","quotes","catch","err","console","log"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,mBAAP,MAAgC,sBAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,YAAT,KAA0B;AAAA;;AAAA,oBACtBL,QAAQ,CAAC,KAAD,CADc;AAAA;AAAA,QACjDM,SADiD;AAAA,QACtCC,YADsC;;AAAA,qBAElBP,QAAQ,CAAC,IAAD,CAFU;AAAA;AAAA,QAEjDQ,WAFiD;AAAA,QAEpCC,cAFoC;;AAIxDR,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMG,MAAM,GAAG,IAAIR,mBAAJ,CAAwB;AAACS,MAAAA,MAAM,EAAE;AAAT,KAAxB,CAAf;;AACA,QAAIP,MAAM,IAAIA,MAAM,CAACQ,IAArB,EAA2B;AACzBR,MAAAA,MAAM,CAACQ,IAAP,CAAYC,GAAZ,CAAiBC,CAAD,IAAO;AACrB,cAAMC,eAAe,GAAG;AAACC,UAAAA,UAAU,EAAEZ,MAAM,CAACY,UAApB;AAAgCJ,UAAAA,IAAI,EAAEE;AAAtC,SAAxB;AACAJ,QAAAA,MAAM,CAACO,UAAP,CAAkBF,eAAlB,EAAmCG,IAAnC,CAAwCC,QAAQ,IAAI;AAClD,cAAI,CAACA,QAAQ,CAACC,OAAd,EAAuB;AACrB,kBAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD,WAFD,MAEO;AACLd,YAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,YAAAA,cAAc,CAACU,QAAQ,CAACG,MAAV,CAAd;AACD;AACF,SAPD,EAQCC,KARD,CAQOC,GAAG,IAAI;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,SAXD;AAYD,OAdD;AAeD;AACF,GApBQ,EAoBNF,YApBM,CAAT;AAsBA,SAAO,CAACC,SAAD,EAAYE,WAAZ,CAAP;AACD,CA3BM;;GAAML,gB","sourcesContent":["import { useState, useEffect } from 'react';\nimport CurrencyLayerClient from 'currencylayer-client';\n\nexport const useCurrencyLayer = (params, dependencies) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedData, setFetchedData] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const client = new CurrencyLayerClient({apiKey: '531d6475cefb59a4563e9acbef4b0559'});\n    if (params && params.date) {\n      params.date.map((d) => {\n        const requestedParams = {currencies: params.currencies, date: d}\n        client.historical(requestedParams).then(response => {\n          if (!response.success) {\n            throw new Error('Failed to fetch.');\n          } else {\n            setIsLoading(false);\n            setFetchedData(response.quotes);\n          }\n        })\n        .catch(err => {\n          console.log(err);\n          setIsLoading(false);\n        });\n      })\n    }\n  }, dependencies);\n\n  return [isLoading, fetchedData];\n};\n"]},"metadata":{},"sourceType":"module"}